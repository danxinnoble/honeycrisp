from Compiler import mpc_math

execfile('/root/SCALE-MAMBA/Programs/ring/ring.mpc')
execfile('/root/SCALE-MAMBA/Programs/lwe/lwe.mpc')


# Number of committee members (full protocol has k+1 users)
k = 19

l = 10
nBitsN = 13
N_ = 1 # Half-width of binomial distribution
lgM = 15
 
# w is chosen so that w^n = -1 (mod p) 
# where p is the size of the prime field
w2048 = cint(1662636632232769309036)
r = Ring(nBitsN, w2048)

lwe = LWE(r, N_, lgM, l) 

# Length of messages
N = 8192

def norm(z):
	mag = sint(0)
	for i in range(len(z)):
		mag += z[i]**2
		return mag

def encrypt(a, b, n):
	[u, v] = lwe.enc(a,b,n)
	return u

def decrypt(enc_u, enc_v, s):
	return lwe.dec(enc_u, enc_v, s)

	
# Public key not needed??
# a = [sint.get_private_input_from(k) for i in range(N)]
# b = [sint.get_private_input_from(k) for i in range(N)]


# A provides encrypted aggregate data, threshold
enc_u = cint.Array(N)
enc_v = cint.Array(N)

@for_range(N)
def set_U(i):
  enc_u[i] = cint.public_input(k) + sint.get_random_bit().reveal()

@for_range(N)
def set_V(i):
  enc_v[i] = cint.public_input(k) + sint.get_random_bit().reveal()


T = sint.get_private_input_from(k)
delta = sint.get_private_input_from(k)

s = sint.Array(N)
#for i in range(N):
@for_range(N)
def copy(i):
	tmp = [sint()]
	input_shares(0, *tmp)
	s[i] = tmp[0]

# Noises encryption, decrypts by using shares of secret key, and compares to threshold.
z = decrypt(enc_u, enc_v, s)
mag = norm(z)

# Returns message if sufficiently far from delta, otherwise returns null.
if (mpc_math.abs_fx(mag - T) < delta):
	print_ln("0")
else:
	print_ln("Text is %s", z.reveal_to[k]);