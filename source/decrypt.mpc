from Compiler import mpc_math

execfile('/root/SCALE-MAMBA/Programs/ring/ring.mpc')
execfile('/root/SCALE-MAMBA/Programs/lwe/lwe.mpc')


# Number of committee members (full protocol has k+1 users)
k = 19

l = 1
nBitsN = 13
N_ = 1 # Half-width of binomial distribution
lgM = 31
 
# w is chosen so that w^n = -1 (mod p) 
# where p is the size of the prime field
w = cint(216409912179401900965416891955038263635)**8

r = Ring(nBitsN, w)

lwe = LWE(r, N_, lgM, l) 

# Length of messages
N = 8192

def encrypt(a, b, n):
	[u, v] = lwe.enc(a,b,n)
	return u

def decrypt(enc_u, enc_v, s):
	return lwe.dec(enc_u, enc_v, s)

	
# A provides encrypted aggregate data, threshold
enc_u = cint.Array(N)
enc_v = cint.Array(N)

@for_range(N)
def set_U(i):
  enc_u[i] = cint.public_input(k)

@for_range(N)
def set_V(i):
  enc_v[i] = cint.public_input(k)


T = sint.get_private_input_from(k)
delta = sint.get_private_input_from(k)

s = sint.Array(N)
#for i in range(N):
@for_range(N)
def copy(i):
	tmp = [sint()]
	input_shares(0, *tmp)
	s[i] = tmp[0]

# Decrypts by using shares of secret key, noises, and compares to threshold.
z = decrypt(enc_u, enc_v, s)[0] + sint.get_random_bit()
# Need to add appropriate noise to all elements

# Returns message if sufficiently far from delta, otherwise returns null.
if (mpc_math.abs_fx(z - T) < delta):
	print_ln("0")
else:
	print_ln("Text is %s", z.reveal_to[k]);
