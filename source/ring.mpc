class Ring(object):

  # Defines parameters for the ring Z/pZ/<X^n + 1>
  # i.e. A ring of polynomials where coefficients are
  #   in Z/pZ, and where polynomial multiplication is 
  #   reduced over X^n+1
  # p is the prime modulus natively used by SCALE-MAMBA
  # Require also that p = 1 (mod 2n)
  # n = 2^nBitsN
  # w is a 2nth primitive root of unity
  # All are public (non-secret) values
  def __init__(self, nBitsN, w):
    self.n = 1 << nBitsN
    self.nBitsN = nBitsN
    self.w = w
    return

  # Return a random element in [0, p)
  def randElem(self):
    return sint.get_random_triple()[0]

  # Return a random cint in [0, p)
  def randElemClear(self):
    return self.randElem().reveal()

  # Returns 0 or 1 each with chance 0.5
  def randBit(self):
    b = sint.get_random_int(1)
    return b

  # Selects r from (X~B(2n, 0.5) - n) mod p
  # i.e. should be centered at 0
  def modBinom(self, n):
    r = sint(0)
    for i in range(0, 2*n):
      r = r + self.randBit()
    return r - n


  # RING OPERATIONS
  # These operations are performed in a ring Z/pZ/<x^n + 1>
  # Here p is the modulus used by SCALE-MAMBA
  # It is assumed that n = len(a) = len(b).

  # Ring addition (i.e. pointwise vector addition mod p)
  def ringAdd(self, a, b):
    res = sint.Array(self.n)
    @for_range(self.n)
    def range_body(i):
      res[i] = a[i] + b[i]
    return res

  # Ring subtraction (i.e. pointwise vector subtraction mod p)
  def ringSub(self, a, b):
    res = sint.Array(self.n)
    @for_range(self.n)
    def range_body(i):
      res[i] = a[i] - b[i]
    return res

  # Ring multiplication (i.e. convolution)
  # Polynomials are represented with lowest powers first
  #   e.g. (1 + 2x + 3x^2) is represented as [1, 2, 3]
  # Reduce polynomial modulo x^(len(a)) + 1
  def ringMul(self, a, b):
    n = self.n
    conv = sint.Array(2*n)
    @for_range(2*n)
    def range_body_zero(i):
      conv[i] = sint(0)
    
    @for_range(n**2)
    def range_body_mul(i):
      j = i % n
      k = i / n
      conv[j+k] = conv[j+k] + ( a[j] * b[k] )

    res = sint.Array(n)
    @for_range(n-1)
    def range_body_wrap(i):
      res[i] = conv[i] - conv[i + n]
    
    res[n-1] = conv[n-1]
    return res

  def bitRev(self, j, nBits):
    s = 0
    for i in range(nBits):
      s = s << 1
      s += j%2
      j = j >> 1
    return s

  # compute a ** b where a, b are cints
  def cPow(self, a, b, nBitsB):
    p = cint(1)
    bRev = self.bitRev(b, nBitsB)
    for i in range(nBitsB):
      p = p**2
      p = p + (bRev % 2)*(p * a - p)
      bRev = bRev >> 1
    return p

  # Find what wExp would be in the recursion
  # wExp is defined as follows
  # wExp(i, nBitsN-1) = n/2
  # To compute at item at depth d < nBitsN-1, look at row d+1 below it.
  #   At the row below there will be a sequence of equal values, of value v.
  #   If i is in the first half of this sequence, wExp(i, d) = v/2
  #   Otherwise wExp(i, d) = v/2 + n/2
  # e.g. the matrix wExp(d, i) when n=8:
  #  1 1 5 5 3 3 7 7
  #  2 2 2 2 6 6 6 6
  #  4 4 4 4 4 4 4 4
  def getWExp(self, d, i):
    n = self.n
    nBits = self.nBitsN
    base = self.bitRev(i, nBits)*2 + 1
    return (base << d) % n

  # Return x_i, where i = 0 (false) or 1 (true)
  def mux(self, i, x0, x1):
    return x0 + i * (x1 - x0)

  # Fast Ring multiplication
  # From Bernstein, Daniel. "Fast multiplication and its applications." 
  # See https://cr.yp.to/papers.html#multapps
  # a, b: operands (elements of Z/pZ/<X^n + 1>
  # a must be a cint array, b must me a sint array
  # n : length of polynomials
  # For this to work, need len(a) = len(b) = n = 2^nBitsN
  # Note that this uses operations NATIVELY in the SCALE-MAMBA field.
  # Let p be the modulus used by SCALE-MAMBA
  # We require: p = 1 (mod 2n), w^n = -1 (mod p)
  def ringMulFast(self, a, b):
    n = self.n
    nBitsN = self.nBitsN

    Rs = sint.Matrix(nBitsN+1, n)
    As = cint.Matrix(nBitsN+1, n)
    Bs = sint.Matrix(nBitsN+1, n)

    @for_range(n)
    def topAB(i):
      As[0][i] = a[i]
      Bs[0][i] = b[i]

    @for_range(1, nBitsN+1)
    def splitRow(k):
      d = nBitsN - k       # Number of recursions left until base layer
      gapSize = 1 << d
      @for_range(n)
      def splitCell(i):
        c = self.cPow(self.w, self.getWExp(cint(d), cint(i)), nBitsN)
        isRight = cint((i >> d) % 2)

	AsUp = As[k-1][i]
	AsUpL = As[k-1][i-gapSize]
	AsUpR = As[k-1][i+gapSize]

        AsIfLeft = AsUp + AsUpR * c
        AsIfRight = AsUpL - AsUp*c

        As[k][i] = self.mux(isRight, AsIfLeft, AsIfRight)

    @for_range(1, nBitsN+1)
    def splitRow(k):
      d = nBitsN - k       # Number of recursions left until base layer
      gapSize = 1 << d
      @for_range(n)
      def splitCell(i):
        c = self.cPow(self.w, self.getWExp(cint(d), cint(i)), nBitsN)
        isRight = cint(((i >> d) % 2))

	BsUp = Bs[k-1][i]
	BsUpL = Bs[k-1][i-gapSize]
	BsUpR = Bs[k-1][i+gapSize]

        BsIfLeft = BsUp + BsUpR * c
        BsIfRight = BsUpL - BsUp*c

        Bs[k][i] = self.mux(isRight, BsIfLeft, BsIfRight)
    
    @for_range(n)
    def baseRs(i):
      Rs[nBitsN][i] = As[nBitsN][i] * Bs[nBitsN][i]

    @for_range(1, nBitsN+1)
    def combRow(d):
      k = nBitsN - d
      gapSize = 1 << (d-1)
      @for_range(n)
      def combCell(i):
        c = self.cPow(self.w, self.getWExp(cint(d-1), cint(i)), nBitsN)
        isRight = cint((i >> (d-1)) % 2)
	RsLeft = Rs[k+1][i] + Rs[k+1][i + gapSize]
        RsRight = (Rs[k+1][i - gapSize] - Rs[k+1][i]) / c
        Rs[k][i] = self.mux(isRight, RsLeft, RsRight)

    res = sint.Array(n)
    @for_range(n)
    def setRes(i):
      res[i] = Rs[0][i] / n

    return res

  # Returns 0:
  def zero(self):
    n = self.n
    zero = sint.Array(n)

    @for_range(n)
    def range_body(i):
      zero[i] = sint(0)

    return zero

  # Random ring element
  # Returns a vector of length n 
  # Each item is chosen uniformally at random from [0, p)
  # Assumes n is even
  def ringRand(self):
    n = self.n
    res = sint.Array(n)
    @for_range(n/2)
    def range_body(i):
      r = sint.get_random_triple()
      res[2*i] = r[0]
      res[2*i+1] = r[1]   # r[0] and r[1] are random and independent
    return res

  # Assumes n is even
  def ringRandClear(self):
    rand = self.ringRand()
    res = self.reveal(rand)
    return res

  # Returns a vector of length n 
  # Each item is chosen independently at random from (B(2N, 0.5) - N) mod p
  def ringBinom(self, N):
    n = self.n
    res = sint.Array(n)
    @for_range(n)
    def range_body(i):
      res[i] = self.modBinom(N)
    return res

  def ringRevealPrettyPrint(self, a):
    print_ln("[ ")
    for i in range(0, len(a)):
      print_ln("%s ", a[i].reveal())
    print_ln("]")
    return

  def reveal(self, a):
    n = self.n
    aClear = cint.Array(n)
    @for_range(n)
    def range_body(i):
      aClear[i] = a[i].reveal()
    return aClear

  # a is a ring element
  def ringRevealToParty(self, a, partyNum):
    for i in range(0, len(a)):
      a[i].reveal_to(partyNum)


  def ringReadFromFile(self, fileName):
    f = open(fileName, "r")
    a = []
    for line in f:
      if (line[0] != '[') and (line[0] != ']'):
        x = int(line)
        a.append(cint(x))
    return a

  def readFromPrivateInput(self, partyNum):
    res = []
    n = self.n
    for i in range(0, n):
      res.append(sint.get_raw_input_from(partyNum))
    return res

